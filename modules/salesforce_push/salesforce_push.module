<?php

/**
 * @file
 * Push updates to Salesforce when a Drupal entity is updated.
 */

define('SALESFORCE_PUSH_QUEUE', 'salesforce_push');

/**
 * Implements hook_entity_insert().
 */
function salesforce_push_entity_insert($entity, $type) {
  salesforce_push_entity_crud($type, $entity, SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE);
}

/**
 * Implements hook_entity_update().
 */
function salesforce_push_entity_update($entity, $type) {
  salesforce_push_entity_crud($type, $entity, SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE);
}

/**
 * Implements hook_entity_delete().
 */
function salesforce_push_entity_delete($entity, $type) {
  salesforce_push_entity_crud($type, $entity, SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE);
}

/**
 * Push entities to Salesforce.
 *
 * @param $entity_type
 * @param $entity
 * @param $sf_sync_trigger
 */
function salesforce_push_entity_crud($entity_type, $entity, $sf_sync_trigger) {
  // avoid duplicate processing if this entity has just been updated by
  // salesforce pull
  if (isset($entity->salesforce_pull) && $entity->salesforce_pull) {
    return;
  }

  list($entity_id,,$bundle) = entity_extract_ids($entity_type, $entity);

  $mappings = salesforce_mapping_load_multiple(array(
    'drupal_entity_type' => $entity_type,
    'drupal_bundle' => $bundle
  ));

  foreach ($mappings as $mapping) {
    if ($mapping->sync_triggers & $sf_sync_trigger) {
      if (isset($mapping->batch_push) && $mapping->batch_push) {
        $queue = DrupalQueue::get(SALESFORCE_PUSH_QUEUE);
        $queue->createItem(array(
          'entity_type' => $entity_type,
          'entity_id' => $entity_id,
          'mapping' => $mapping,
          'trigger' => $sf_sync_trigger
        ));
        continue;
      }

      salesforce_push_sync_rest($entity_type, $entity_id, $mapping, $sf_sync_trigger);
    }
  }
}

/**
 * Sync Drupal entities and Salesforce objects using the REST API
 *
 * @param $entity_type
 * @param $entity_id
 * @param $mapping
 *   Salesforce mapping object.
 * @param $sf_sync_trigger
 *   Trigger for this sync.
 */
function salesforce_push_sync_rest($entity_type, $entity_id, $mapping, $sf_sync_trigger) {
  $mapped_objects = salesforce_mapping_object_load_by_drupal($entity_type, $entity_id);
  $entity_wrapper = entity_metadata_wrapper($entity_type, entity_load_single($entity_type, $entity_id));
  $sfapi = salesforce_get_api();

  // Delete SF object
  if ($mapped_objects && $sf_sync_trigger == SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE) {
    try {
      $sfapi->objectDelete($mapping->salesforce_object_type, $mapped_objects->salesforce_id);
    }
    catch(SalesforceException $e) {
      watchdog_exception('salesforce_push', $e);
      drupal_set_message($e->getMessage(), 'error');
    }

    drupal_set_message(t('Salesforce object %sfid has been deleted.', array(
      '%sfid' => $mapped_objects->salesforce_id
    )));
    $mapped_objects->delete();

    return;
  }

  // Generate parameter array from field mappings.
  $params = salesforce_push_map_params($mapping, $entity_wrapper, $key_field, $key_value);

  // Entity is not linked to an SF object.
  if (!$mapped_objects) {
    // Setup SF record type
    if($mapping->salesforce_record_type != SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE) {
      $params['RecordTypeId'] = $mapping->salesforce_record_type;
    }

    try {
      // An external key has been specified, attempt an upsert().
      if (!empty($key_field)) {
        $data = $sfapi->objectUpsert($mapping->salesforce_object_type, $key_field, $key_value, $params);
      }
      // No key or mapping, create a new object in Salesforce.
      else {
        $data = $sfapi->objectCreate($mapping->salesforce_object_type, $params);
      }
    }
    catch(SalesforceException $e) {
      watchdog_exception('salesforce_push', $e);
      drupal_set_message($e->getMessage(), 'error');
      return;
    }

    // Success.
    if (empty($data['errorCode'])) {
      // Create mapping object, saved below.
      $mapped_objects = entity_create('salesforce_mapping_object', array(
        'entity_id' => $entity_id,
        'entity_type' => $entity_type,
        'salesforce_id' => $data['id']
      ));
    }
    else {
      drupal_set_message(t('Failed to sync %label with Salesforce. @code: @message', array(
        '%label' => $entity_wrapper->label(),
        '@code' => $data['errorCode'],
        '@message' => $data['message']
      )), 'error');

      return;
    }
  }
  // Existing object link, update.
  else {
    // Handle the case of mapped objects last sync being more recent than
    // the entity's timestamp, which is set by salesforce_mapping.
    if ($mapped_objects->last_sync > $mapped_objects->entity_updated) {
      return;
    }

    // Update SF object.
    try {
      $sfapi->objectUpdate($mapping->salesforce_object_type, $mapped_objects->salesforce_id, $params);
    }
    catch(SalesforceException $e) {
      watchdog_exception('salesforce_push', $e);
      drupal_set_message($e->getMessage(), 'error');
    }

    $mapped_objects->last_sync = REQUEST_TIME;
  }

  drupal_set_message(t('%name has been synchronized with Salesforce record %sfid.', array(
    '%name' => $entity_wrapper->label(),
    '%sfid' => $mapped_objects->salesforce_id
  )));

  // Note that last_sync time is updated automatically.
  $mapped_objects->save();
}

/**
 * Implements hook_cron().
 */
function salesforce_push_cron() {
  $queue = DrupalQueue::get(SALESFORCE_PUSH_QUEUE);
  $limit = variable_get('salesforce_pull_limit', 50);
  $use_soap = module_exists('salesforce_soap');
  for ($stop = 0; ($item = $queue->claimItem()) && $stop < $limit; $stop++) {
    $mapping = $item->data['mapping'];
    $entity_type = $item->data['entity_type'];
    $entity_id = $item->data['entity_id'];
    $mapped_objects = salesforce_mapping_object_load_by_drupal($entity_type, $entity_id);
    if ($use_soap) {
      if ($item->trigger == SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE && $mapped_objects) {
        $delete_list[] = $mapped_objects->salesforce_id;
      }
      else {
        $entity = entity_load_single($item->data['entity_type'], $item->data['entity_id']);
        $wrapper = entity_metadata_wrapper($item->data['entity_type'], $entity);
        $params = salesforce_push_map_params($mapping, $wrapper, $key_field, $key_value);
        $sobject = new SObject();
        $sobject->type = $mapping->salesforce_object_type;
        $sobject->fields = $params;
        if ($mapped_objects) {
          if ($key_field && $key_value) {
            $upsert_list[$key_field][] = $sobject;
          }
          else {
            $create_list[] = $sobject;
          }
        }
        else {
          $update_list[] = $sobject;
        }
      }
    }
    else {
      salesforce_push_sync_rest($entity_type, $entity_id, $mapping, $item->data['trigger']);
    }
  }

  // Use soap API to batch process records.
  $soap = new SalesforceSoapPartner(salesforce_get_api());
  if (!empty($delete_list)) {
    $results = $soap->delete($delete_list);
    salesforce_push_log('Delete', $results);
  }

  if (!empty($create_list)) {
    $results = $soap->create($create_list);
    salesforce_push_log('Create', $results);
  }

  if (!empty($update_list)) {
    $results = $soap->update($update_list);
    salesforce_push_log('Update', $results);
  }

  if (!empty($upsert_list)) {
    foreach ($upsert_list as $key => $upsert_item) {
      $results = $soap->upsert($key, $upsert_list);
      salesforce_push_log('Upsert', $results);
    }
  }
}

/**
 * Record SOAP API batch API calls to watchdog.
 *
 * @param $op
 * @param $results
 */
function salesforce_push_log($op, $results) {
  foreach ($results as $result) {
    if ($result->success) {
      watchdog('salesforce_push', '%op: Salesforce object %id',
        array('%id' => $result->id, '%op' => $op));
    }
    else {
      foreach ($result->errors() as $error) {
        watchdog('salesforce_push', '%op error for Salesforce object %id. @code: @message',
          array(
            '%id' => $result->id,
            '@code' => $error->statusCode,
            '@message' => $error->message,
            '%op' => $op
          ),
          WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Map Drupal values to a Salesforce object.
 *
 * @param $mapping
 * @param $entity_wrapper
 * @param $key_field
 * @param $key_value
 *
 * @return array
 *   Associative array of key value pairs.
 */
function salesforce_push_map_params($mapping, $entity_wrapper, &$key_field, &$key_value) {
  foreach ($mapping->field_mappings as $fieldmap) {
    // Skip fields that aren't being pushed to Salesforce.
    if (!in_array($fieldmap['direction'], array(SALESFORCE_MAPPING_DIRECTION_DRUPAL_SF, SALESFORCE_MAPPING_DIRECTION_SYNC))) {
      continue;
    }

    $fieldmap_type = salesforce_mapping_get_fieldmap_types($fieldmap['drupal_field']['fieldmap_type']);
    $value = call_user_func($fieldmap_type['push_value_callback'], $fieldmap, $entity_wrapper);
    $params[$fieldmap['salesforce_field']['name']] = $value;

    if ($fieldmap['key']) {
      $key_field = $fieldmap['salesforce_field']['name'];
      $key_value = $value;
    }
  }

  drupal_alter('salesforce_push_params', $params, $mapping, $entity);

  return $params;
}
