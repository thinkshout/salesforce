<?php

/**
 * @file
 * Push updates to Salesforce when a Drupal entity is updated.
 */

/**
 * Implements hook_entity_insert().
 */
function salesforce_push_entity_insert($entity, $type) {
  salesforce_push_sync_entity($type, $entity, SALESFORCE_MAPPING_SYNC_DRUPAL_CREATE);
}

/**
 * Implements hook_entity_update().
 */
function salesforce_push_entity_update($entity, $type) {
  salesforce_push_sync_entity($type, $entity, SALESFORCE_MAPPING_SYNC_DRUPAL_UPDATE);
}

/**
 * Implements hook_entity_delete().
 */
function salesforce_push_entity_delete($entity, $type) {
  salesforce_push_sync_entity($type, $entity, SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE);
}

/**
 * Push entities to Salesforce.
 *
 * @param $entity_type
 * @param $entity
 * @param $sf_sync_trigger
 */
function salesforce_push_sync_entity($entity_type, $entity, $sf_sync_trigger) {
  // avoid duplicate processing if this entity has just been updated by
  // salesforce pull
  if (isset($entity->salesforce_pull) && $entity->salesforce_pull) {
    return;
  }

  list($entity_id,,$bundle) = entity_extract_ids($entity_type, $entity);

  $mappings = salesforce_mapping_load_multiple(array(
    'drupal_entity_type' => $entity_type,
    'drupal_bundle' => $bundle
  ));

  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  foreach ($mappings as $mapping) {
    if ($mapping->sync_triggers & $sf_sync_trigger) {
      $mapped_objects = salesforce_mapping_object_load_by_drupal($entity_type, $entity_id);
      $sfapi = salesforce_get_api();

      // Delete SF object
      if ($mapped_objects && $sf_sync_trigger == SALESFORCE_MAPPING_SYNC_DRUPAL_DELETE) {
        try {
          $sfapi->objectDelete($mapping->salesforce_object_type, $mapped_objects->salesforce_id);
        }
        catch(SalesforceException $e) {
          watchdog_exception('salesforce_push', $e);
          drupal_set_message($e->getMessage(), 'error');
        }

        drupal_set_message(t('Salesforce object %sfid has been deleted.', array(
          '%sfid' => $mapped_objects->salesforce_id
        )));
        $mapped_objects->delete();

        return;
      }

      // Generate parameter array from field mappings.
      $params = array();
      $key_field = $key_value = '';
      foreach ($mapping->field_mappings as $fieldmap) {
        // Skip fields that aren't being pushed to Salesforce.
        if (!in_array($fieldmap['direction'], array(SALESFORCE_MAPPING_DIRECTION_DRUPAL_SF, SALESFORCE_MAPPING_DIRECTION_SYNC))) {
          continue;
        }


        if ($fieldmap['key']) {
          $key_field = $fieldmap['salesforce_field']['name'];
          $key_value = $value;
        }
        $fieldmap_type = salesforce_mapping_get_fieldmap_types($fieldmap['drupal_field']['fieldmap_type']);
        $value = call_user_func($fieldmap_type['push_value_callback'], $fieldmap, $wrapper);
        $params[$fieldmap['salesforce_field']['name']] = $value;
      }

      drupal_alter('salesforce_push_params', $params, $mapping, $entity);

      // Entity is not linked to an SF object.
      if (!$mapped_objects) {
        // Setup SF record type
        if($mapping->salesforce_record_type != SALESFORCE_MAPPING_DEFAULT_RECORD_TYPE) {
          $params['RecordTypeId'] = $mapping->salesforce_record_type;
        }

        try {
          // An external key has been specified, attempt an upsert().
          if (!empty($key_field)) {
            $data = $sfapi->objectUpsert($mapping->salesforce_object_type, $key_field, $key_value, $params);
          }
          // No key or mapping, create a new object in Salesforce.
          else {
            $data = $sfapi->objectCreate($mapping->salesforce_object_type, $params);
          }
        }
        catch(SalesforceException $e) {
          watchdog_exception('salesforce_push', $e);
          drupal_set_message($e->getMessage(), 'error');
          return;
        }

        // Success.
        if (empty($data['errorCode'])) {
          // Create mapping object, saved below.
          $mapped_objects = entity_create('salesforce_mapping_object', array(
            'entity_id' => $entity_id,
            'entity_type' => $entity_type,
            'salesforce_id' => $data['id']
          ));
        }
        else {
          drupal_set_message(t('Failed to sync %label with Salesforce. @code: @message', array(
            '%label' => entity_label($entity_type, $entity),
            '@code' => $data['errorCode'],
            '@message' => $data['message']
          )), 'error');

          return;
        }
      }
      // Existing object link, update.
      else {
        // Handle the case of mapped objects last sync being more recent than
        // the entity's timestamp, which is set by salesforce_mapping.
        if ($mapped_objects->last_sync > $mapped_objects->entity_updated) {
          return;
        }

        // Update SF object.
        try {
          $sfapi->objectUpdate($mapping->salesforce_object_type, $mapped_objects->salesforce_id, $params);
        }
        catch(SalesforceException $e) {
          watchdog_exception('salesforce_push', $e);
          drupal_set_message($e->getMessage(), 'error');
        }

        $mapped_objects->last_sync = REQUEST_TIME;
      }

      drupal_set_message(t('%name has been synchronized with Salesforce record %sfid.', array(
        '%name' => entity_label($entity_type, $entity),
        '%sfid' => $mapped_objects->salesforce_id
      )));

      // Note that last_sync time is updated automatically.
      $mapped_objects->save();
    }
  }
}
