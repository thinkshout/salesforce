<?php

/**
 * Define pull queue name.
 */
define('SALESFORCE_PULL_QUEUE', 'salesforce_pull');

/**
 * Implements hook_cron()
 */
function salesforce_pull_cron() {
  salesforce_pull_get_updated_records();
  salesforce_pull_process_records();
  salesforce_pull_process_deleted_records();
}

/**
 * Pull updated records and place them in the queue.
 */
function salesforce_pull_get_updated_records() {
  $sfapi = salesforce_get_api();
  $queue = DrupalQueue::get(SALESFORCE_PULL_QUEUE);

  foreach (salesforce_mapping_get_mapped_objects() as $type) {
    // Get field list from mappings
    $mapped_fields = array();
    foreach (salesforce_mapping_load_multiple(array('salesforce_object_type' => $type)) as $mapping) {
      foreach ($mapping->field_mappings as $field_map) {
        $mapped_fields[$field_map['salesforce_field']['name']] = $field_map['salesforce_field']['name'];
      }
    }
    $fields = 'Id,+LastModifiedDate';
    foreach ($mapped_fields as $field) {
      $fields .= ',+' . $field;
    }

    // SOQL Query
    $queryString = 'SELECT+'. $fields .'+from+' . $type;
    $sf_last_sync = variable_get('salesforce_pull_last_sync_' . $type, NULL);

    // If no lastupdate, get all records, else get records since last pull
    if ($sf_last_sync) {
      $last_sync = gmdate('Y-m-d\TH:i:s\Z', $sf_last_sync);
      $queryString .= '+where+LastModifiedDate>' . $last_sync;
    }

    $results = $sfapi->query($queryString);
    $version_url = $sfapi->rest_api_version['url'];

    if (!isset($results['errorCode'])) {
      // Handle requests larger than the batch limit (usually 2000)
      $next_records_url = isset($results['nextRecordsUrl']) ?
        str_replace($version_url, '', $results['nextRecordsUrl']) :
        FALSE;
      while($next_records_url) {
        $new_result = $sfapi->apiCall($next_records_url);
        $results['records'] = array_merge($results['records'], $new_result['records']);
        $next_records_url = isset($new_result['nextRecordsUrl']) ?
          str_replace($version_url, '', $new_result['nextRecordsUrl']) : FALSE;
      }

      // Write items to the queue
      foreach ($results['records'] as $result) {
        $queue->createItem($result);
      }

      variable_set('salesforce_pull_last_sync_' . $type, REQUEST_TIME);
    }
    else {
      watchdog('Salesforce Pull', $results['errorCode'] . ':' . $results['message'], array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * Process records in the queue.
 */
function salesforce_pull_process_records() {
  $limit = variable_get('salesforce_pull_limit', 50);

  $queue = DrupalQueue::get(SALESFORCE_PULL_QUEUE);
  for ($stop = 0; ($item = $queue->claimItem()) && $stop < $limit; $stop++) {
    // Get Salesforce object
    $sf_object = $item->data;

    // Get Mapping
    $sf_mappings = salesforce_mapping_load_multiple(
      array('salesforce_object_type' => $sf_object['attributes']['type'])
    );

    foreach ($sf_mappings as $sf_mapping) {
      // Mapping object exists?
      $mapping_object = salesforce_mapping_object_load_by_sfid($sf_object['Id']);
      if ($mapping_object && ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_UPDATE)) {
        try {
          $entity = entity_load_single($mapping_object->entity_type, $mapping_object->entity_id);

          // Flag this entity as having been processed. This does not persist, but
          // is used by salesforce_push to avoid duplicate processing.
          $entity->salesforce_pull = TRUE;
          $entity_updated = isset($entity->updated) ? $entity->updated : $mapping_object->entity_updated;

          $sf_object_updated = strtotime($sf_object['LastModifiedDate']);
          if ($sf_object_updated > $entity_updated) {

            $wrapper = entity_metadata_wrapper($sf_mapping->drupal_entity_type, $entity);

            salesforce_pull_map_fields($sf_mapping->field_mappings, $wrapper, $sf_object);

            // Update entity
            $wrapper->save();

            $mapping_object->last_sync = REQUEST_TIME;
            $mapping_object->entity_update = REQUEST_TIME;
            watchdog('Salesforce Pull',
              'Updated entity %label associated with Salesforce Object ID: %sfid',
              array(
                '%label' => $wrapper->label(),
                '%sfid' => $sf_object['Id']
              )
            );

          }
        }
        catch(Exception $e) {
          $message = $e->getMessage() . ' ' . t('Processing failed for entity %label associated with Salesforce Object ID: %sfobjectid',
            array(
              '%label' => $wrapper->label(),
              '%sfobjectid' => $sf_object['Id']
            )
          );
          watchdog('Salesforce Pull', $message , array(), WATCHDOG_ERROR);
          drupal_set_message('There were failures processing data from SalesForce. Please check the error logs.', 'error', FALSE);
        }
      }
      else if ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_CREATE) {
        try {
          // Create entity from mapping object and field maps.
          $entity_info = entity_get_info($sf_mapping->drupal_entity_type);
          $values = array(
            $entity_info['entity keys']['bundle'] => $sf_mapping->drupal_bundle,
            'salesforce_pull' => TRUE // see note above about flag
          );
          // Create entity
          $entity = entity_create($sf_mapping->drupal_entity_type, $values);
          $wrapper = entity_metadata_wrapper($sf_mapping->drupal_entity_type, $entity);
          salesforce_pull_map_fields($sf_mapping->field_mappings, $wrapper, $sf_object);
          $wrapper->save();

          // Create mapping object
          $mapping_object = entity_create('salesforce_mapping_object', array(
            'salesforce_id' => $sf_object['Id'],
            'entity_type' => $sf_mapping->drupal_entity_type,
            'entity_id' => $wrapper->getIdentifier()
          ));

          watchdog('Salesforce Pull',
            'Created entity %label associated with Salesforce Object ID: %sfid',
            array(
              '%label' => $wrapper->label(),
              '%sfid' => $sf_object['Id']
            )
          );
        }
        catch(Exception $e) {
          $message = $e->getMessage() . ' ' . t('Processing failed for entity %label associated with Salesforce Object ID: %sfobjectid',
            array(
              '%label' => $wrapper->label(),
              '%sfobjectid' => $sf_object['Id']
            )
          );
          watchdog('Salesforce Pull', $message , array(), WATCHDOG_ERROR);
          drupal_set_message('There were failures processing data from SalesForce. Please check the error logs.', 'error', FALSE);
        }
      }

      // Save our mapped objects.
      if ($mapping_object) {
        $mapping_object->save();
      }
    }

    // Remove item from queue
    $queue->deleteItem($item);
  }

  // If we have reached the pull limit and an item is still claimed, release it
  if ($item) {
    $queue->releaseItem($item);
  }
}

/**
 * Process deleted records from salesforce
 */
function salesforce_pull_process_deleted_records() {
  if (!module_exists('salesforce_soap')) {
    drupal_set_message('Enable Salesforce SOAP to process deleted records');
    return;
  }
  $sfapi = salesforce_get_api();
  module_load_include('inc', 'salesforce_soap');
  $soap = new SalesforceSoapPartner($sfapi);

  foreach (salesforce_mapping_get_mapped_objects() as $type) {

    $last_delete_sync = variable_get('salesforce_delete_last_sync_' . $type, REQUEST_TIME);
    $now = time();
    // SOAP getDeleted() restraint: startDate must be at least one minute greater than endDate
    $now = $now > $last_delete_sync+60 ? $now : $now+60;
    $last_delete_sync_sf = gmdate('Y-m-d\TH:i:s\Z', $last_delete_sync);
    $now_sf = gmdate('Y-m-d\TH:i:s\Z', $now);
    $deleted = $soap->getDeleted($type, $last_delete_sync_sf, $now_sf);
    if (!empty($deleted->deletedRecords)) {
      $sf_mappings = salesforce_mapping_load_multiple(
        array('salesforce_object_type' => $type)
      );
      foreach ($deleted->deletedRecords as $record) {
        $mapping_object = salesforce_mapping_object_load_by_sfid($record->id);
        if ($mapping_object) {
          $entity = entity_load_single($mapping_object->entity_type, $mapping_object->entity_id);
          $entity_label =  entity_label($mapping_object->entity_type, $entity);
          foreach ($sf_mappings as $sf_mapping) {
            if ($sf_mapping->sync_triggers & SALESFORCE_MAPPING_SYNC_SF_DELETE) {
              entity_delete($sf_mapping->drupal_entity_type, $mapping_object->entity_id);

              watchdog('Salesforce Pull',
                'Deleted entity %label with ID: %id associated with Salesforce Object ID: %sfid',
                array(
                  '%label' => $entity_label,
                  '%id' => $mapping_object->entity_id,
                  '%sfid' => $record->id
                )
              );
            }
          }
          $mapping_object->delete();
        }
      }
    }
    variable_set('salesforce_delete_last_sync_' . $type, REQUEST_TIME);
  }
}

/**
 * Map field values.
 *
 * @param $field_maps
 * @param $entity_wrapper
 * @param $sf_object
 */
function salesforce_pull_map_fields($field_maps, &$entity_wrapper, $sf_object) {
  foreach ($field_maps as $field_map) {
    if ($field_map['direction'] == 'sync' || $field_map['direction'] == 'sf_drupal') {

      $drupal_fields_array = explode(':', $field_map['drupal_field']['fieldmap_value']);
      $parent = $entity_wrapper;
      foreach ($drupal_fields_array as $drupal_field) {
        if ($parent instanceof EntityListWrapper) {
         $child_wrapper = $parent->get(0)->{$drupal_field};
        }
        else {
          $child_wrapper = $parent->{$drupal_field};
        }
        $parent = $child_wrapper;
      }
      $fieldmap_type = salesforce_mapping_get_fieldmap_types($field_map['drupal_field']['fieldmap_type']);
      $value = call_user_func($fieldmap_type['pull_value_callback'], $parent, $sf_object, $field_map);

      // Allow this value to be altered before assigning to the entity.
      drupal_alter('salesforce_pull_entity_value', $value, $field_map, $sf_object);
      if (isset($value)) {
        if ($parent instanceof EntityListWrapper) {
          $parent->offsetSet(0, $value);
        }
        else {
          $parent->set($value);
        }
      }
    }
  }
}
